{"version":3,"file":"static/js/932.0863487a.chunk.js","mappings":";gMA+HA,IAtHiB,WACf,IAAMA,GAAWC,EAAAA,EAAAA,MAKXC,EAA2C,mBAFhCC,EAAAA,EAAAA,MAEmBC,SAqC9BC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbC,MAAO,GACPC,SAAU,GACVC,eAAgB,IAIlBC,iBAAkBC,EAAAA,GAtCbV,EAYI,CACLM,MAAOI,EAAAA,KACJC,QAAQ,uHAA4D,CACnEC,QAAS,kBAEVC,SAAS,6BACZN,SAAUG,EAAAA,KACPI,IAAI,EAAG,gCACPD,SAAS,gCACZL,eAAgBE,EAAAA,KACbI,IAAI,EAAG,gCACPD,SAAS,sCACTE,MAAM,CAACL,EAAAA,GAAQ,YAAa,MAAO,yBAvBjC,CACLJ,MAAOI,EAAAA,KACJC,QAAQ,uHAA4D,CACnEC,QAAS,kBAEVC,SAAS,6BACZN,SAAUG,EAAAA,KACPI,IAAI,EAAG,gCACPD,SAAS,kCAgChBG,SAAU,SAAAC,GAEJnB,EADJE,GAEMkB,EAAAA,EAAAA,GAAU,CAAEZ,MAAOW,EAAOX,MAAOC,SAAUU,EAAOV,YAGlDY,EAAAA,EAAAA,GAAU,CAAEb,MAAOW,EAAOX,MAAOC,SAAUU,EAAOV,WAE1D,IAGF,OACEa,EAAAA,EAAAA,KAAA,OAAAC,UACEC,EAAAA,EAAAA,MAAA,QAAMN,SAAUb,EAAOoB,aAAaF,SAAA,EAClCD,EAAAA,EAAAA,KAAA,SAAOI,QAAQ,QAAOH,SAAC,sBACvBD,EAAAA,EAAAA,KAAA,SACEK,GAAG,QACHC,KAAK,QACLC,KAAK,QACLC,SAAUzB,EAAO0B,aACjBC,OAAQ3B,EAAO4B,WACfC,MAAO7B,EAAOc,OAAOX,SAGvBc,EAAAA,EAAAA,KAAA,SAAOI,QAAQ,WAAUH,SAAC,yBAC1BD,EAAAA,EAAAA,KAAA,SACEK,GAAG,WACHC,KAAK,WACLC,KAAK,WACLC,SAAUzB,EAAO0B,aACjBC,OAAQ3B,EAAO4B,WACfC,MAAO7B,EAAOc,OAAOV,WAGtBP,IACCsB,EAAAA,EAAAA,MAAAW,EAAAA,SAAA,CAAAZ,SAAA,EACED,EAAAA,EAAAA,KAAA,SAAOI,QAAQ,iBAAgBH,SAAC,qBAChCD,EAAAA,EAAAA,KAAA,SACEK,GAAG,iBACHC,KAAK,iBACLC,KAAK,WACLC,SAAUzB,EAAO0B,aACjBC,OAAQ3B,EAAO4B,WACfC,MAAO7B,EAAOc,OAAOT,qBAK3BY,EAAAA,EAAAA,KAAA,OAAKc,MAAO,CAAEC,MAAO,UAAWd,SAC7BlB,EAAOiC,QAAQ9B,OAASH,EAAOkC,OAAO/B,MACnCH,EAAOkC,OAAO/B,MACdH,EAAOiC,QAAQ7B,UAAYJ,EAAOkC,OAAO9B,SACzCJ,EAAOkC,OAAO9B,SACdJ,EAAOiC,QAAQ5B,gBAAkBL,EAAOkC,OAAO7B,eAC/CL,EAAOkC,OAAO7B,eACd,MAGNY,EAAAA,EAAAA,KAAA,UAAQO,KAAK,SAAQN,SAAC,eAI9B,gEC7GA,UAbyB,WAEvB,OAEED,EAAAA,EAAAA,KAAA,WAAAC,UACED,EAAAA,EAAAA,KAACkB,EAAAA,EAAS,CAAAjB,UACRD,EAAAA,EAAAA,KAACmB,EAAAA,EAAQ,OAKjB","sources":["components/AuthForm/AuthForm.jsx","pages/RegistrationPage.jsx"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\n\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\n\nimport signInAPI from '../../API/Auth/signInAPI';\nimport signUpAPI from '../../API/Auth/signUpAPI';\n\nconst AuthForm = () => {\n  const dispatch = useDispatch();\n\n  // get current location\n  const location = useLocation();\n\n  const isRegistrationPage = location.pathname === '/registration';\n\n  // The 'formik' check all validation expression.\n  // But we have two variants form (logIn and register).\n  // We must create own validate rules function, because\n  // validation expression must be different for each situation.\n  const validationSchemaBody = () => {\n    if (!isRegistrationPage) {\n      return {\n        email: Yup.string()\n          .matches(/\\w+[a-zA-Zа-яА-Я]+@\\w+[a-zA-Zа-яА-Я]+\\.\\w+[a-zA-Zа-яА-Я]/, {\n            message: 'Invalid email',\n          })\n          .required(\"'Email' field is required\"),\n        password: Yup.string()\n          .min(8, 'Must be 8 characters or more')\n          .required(\"'Password' field is required\"),\n      };\n    } else {\n      return {\n        email: Yup.string()\n          .matches(/\\w+[a-zA-Zа-яА-Я]+@\\w+[a-zA-Zа-яА-Я]+\\.\\w+[a-zA-Zа-яА-Я]/, {\n            message: 'Invalid email',\n          })\n          .required(\"'Email' field is required\"),\n        password: Yup.string()\n          .min(8, 'Must be 8 characters or more')\n          .required(\"'Password' field is required\"),\n        repeatPassword: Yup.string()\n          .min(8, 'Must be 8 characters or more')\n          .required(\"'RepeatPassword' field is required\")\n          .oneOf([Yup.ref('password'), null], 'Passwords must match'),\n      };\n    }\n  };\n\n  // create 'formik' hook and configurate him\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n      repeatPassword: '',\n    },\n\n    //yup stored own validate functions (for email, password...etc)\n    validationSchema: Yup.object(validationSchemaBody()),\n\n    //!'values' contains ended values all Form inputs. They will can get: 'values.<field name>'\n    onSubmit: values => {\n      isRegistrationPage\n        ? dispatch(\n            signUpAPI({ email: values.email, password: values.password })\n          )\n        : dispatch(\n            signInAPI({ email: values.email, password: values.password })\n          );\n    },\n  });\n\n  return (\n    <div>\n      <form onSubmit={formik.handleSubmit}>\n        <label htmlFor=\"email\">Enter your email</label>\n        <input\n          id=\"email\"\n          name=\"email\"\n          type=\"email\"\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          value={formik.values.email}\n        />\n\n        <label htmlFor=\"password\">Enter your password</label>\n        <input\n          id=\"password\"\n          name=\"password\"\n          type=\"password\"\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          value={formik.values.password}\n        />\n\n        {isRegistrationPage && (\n          <>\n            <label htmlFor=\"repeatPassword\">Repeat password</label>\n            <input\n              id=\"repeatPassword\"\n              name=\"repeatPassword\"\n              type=\"password\"\n              onChange={formik.handleChange}\n              onBlur={formik.handleBlur}\n              value={formik.values.repeatPassword}\n            ></input>\n          </>\n        )}\n\n        <div style={{ color: 'orange' }}>\n          {formik.touched.email && formik.errors.email\n            ? formik.errors.email\n            : formik.touched.password && formik.errors.password\n            ? formik.errors.password\n            : formik.touched.repeatPassword && formik.errors.repeatPassword\n            ? formik.errors.repeatPassword\n            : ''}\n        </div>\n\n        <button type=\"submit\">Submit</button>\n      </form>\n    </div>\n  );\n};\n\nexport default AuthForm;\n","import AuthForm from '../components/AuthForm/AuthForm'\nimport Container from 'components/Container/Container';\n\nconst RegistrationPage = () => {\n\n  return (\n    \n    <section>\n      <Container>\n        <AuthForm/>\n      </Container>\n    </section>\n\n  );\n};\n\nexport default RegistrationPage;\n"],"names":["dispatch","useDispatch","isRegistrationPage","useLocation","pathname","formik","useFormik","initialValues","email","password","repeatPassword","validationSchema","Yup","matches","message","required","min","oneOf","onSubmit","values","signUpAPI","signInAPI","_jsx","children","_jsxs","handleSubmit","htmlFor","id","name","type","onChange","handleChange","onBlur","handleBlur","value","_Fragment","style","color","touched","errors","Container","AuthForm"],"sourceRoot":""}